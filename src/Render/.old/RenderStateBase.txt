class RenderStateBase
{
static constexpr int32_t TEXTURE_SLOT_MAX = 8;

public:

	enum class AlphaBlendType : int32_t
	{
		Opacity = 0,
		Blend = 1,
		Add = 2,
		Sub = 3,
		Mul = 4,
	};

	enum class CullingType : int32_t
	{
		Front = 0,
		Back = 1,
		Double = 2,
	};

	enum class TextureFilterType : int32_t
	{
		Nearest = 0,
		Linear = 1,
	};

	enum class TextureWrapType : int32_t
	{
		Repeat = 0,
		Clamp = 1,
	};

	struct State
	{
		bool DepthTest : 1;
		bool DepthWrite : 1;
		AlphaBlendType AlphaBlend;
		CullingType CullingType;
		std::array<TextureFilterType, TEXTURE_SLOT_MAX> TextureFilterTypes;
		std::array<TextureWrapType, TEXTURE_SLOT_MAX> TextureWrapTypes;

		std::array<uint64_t, TEXTURE_SLOT_MAX> TextureIDs;

		State();

		void Reset();

		void CopyTo(State& state);
	};

protected:
	std::stack<State> m_stateStack;
	State m_active;
	State m_next;

public:
	RenderStateBase();
	virtual ~RenderStateBase();

	virtual void Update(bool forced) = 0;

	State& Push();
	void Pop();
	State& GetActiveState();
};